#CREATING NEW DATA BASE

create database BigBasket;


USE BIGBASKET;


#CREATING A NEW TABLE IN THE DATABASE BIG BASKET


CREATE TABLE VEGETABLE 
	(Vegetable_Fruit_Name varchar(75) , 
	Main_Product varchar(25), 
	Prise float, 
	Discount_Percent float, 
	Wight int , 
	Unit varchar(20) , 
	Prise_Per_Kg  int);


# WATCHING THE TABLE 

SELECT * FROM VEGETABLE;



# TOTAL NUMBER OF ROWS IN THS DATA SET

SELECT COUNT(*) AS TOTAL_NUMBER_ROWS FROM VEGETABLE;




# MAXIMUM AND MINIMUM PRISE_PER_KG

SELECT MAX(PRISE_PER_KG) AS MAXIMUM_RATE , MIN(PRISE_PER_KG) AS MINIMUM_RATE 
FROM VEGETABLE ;



# GIVING THE PRISE RANGE IN THE DATA SET 

SELECT *,

CASE 
	WHEN PRISE_PER_KG >= 0 AND PRISE_PER_KG < 101 THEN "0-100"
	WHEN PRISE_PER_KG >= 101 AND PRISE_PER_KG < 201 THEN "100-200"
	WHEN PRISE_PER_KG >= 201 AND PRISE_PER_KG < 301 THEN "200-300"
	WHEN PRISE_PER_KG >= 301 AND PRISE_PER_KG < 401 THEN "300-400"
	WHEN PRISE_PER_KG >= 401 AND PRISE_PER_KG < 501 THEN "400-500"
	WHEN PRISE_PER_KG >= 501 AND PRISE_PER_KG < 601 THEN "500-600"
	WHEN PRISE_PER_KG >= 601 AND PRISE_PER_KG < 701 THEN "600-700"
	WHEN PRISE_PER_KG >= 701 AND PRISE_PER_KG < 801 THEN "700-800"
	WHEN PRISE_PER_KG >= 801 AND PRISE_PER_KG < 901 THEN "800-900"
	WHEN PRISE_PER_KG >= 901 AND PRISE_PER_KG < 1001 THEN "900-1000"
	WHEN PRISE_PER_KG >= 1001 AND PRISE_PER_KG < 2000 THEN "1000-1100"
END AS PRISE_RANGE

FROM VEGETABLE;




# COUNT OF VEGETABLES AND FRUITS IN THE PRISE RANGE 

WITH X AS (
		SELECT *,
		CASE 
			WHEN PRISE_PER_KG >= 0 AND PRISE_PER_KG < 101 THEN "0-100"
			WHEN PRISE_PER_KG >= 101 AND PRISE_PER_KG < 201 THEN "100-200"
			WHEN PRISE_PER_KG >= 201 AND PRISE_PER_KG < 301 THEN "200-300"
			WHEN PRISE_PER_KG >= 301 AND PRISE_PER_KG < 401 THEN "300-400"
			WHEN PRISE_PER_KG >= 401 AND PRISE_PER_KG < 501 THEN "400-500"
			WHEN PRISE_PER_KG >= 501 AND PRISE_PER_KG < 601 THEN "500-600"
			WHEN PRISE_PER_KG >= 601 AND PRISE_PER_KG < 701 THEN "600-700"
			WHEN PRISE_PER_KG >= 701 AND PRISE_PER_KG < 801 THEN "700-800"
			WHEN PRISE_PER_KG >= 801 AND PRISE_PER_KG < 901 THEN "800-900"
			WHEN PRISE_PER_KG >= 901 AND PRISE_PER_KG < 1001 THEN "900-1000"
			WHEN PRISE_PER_KG >= 1001 AND PRISE_PER_KG < 2000 THEN "1000-1100"
		END AS PRISE_RANGE
        FROM VEGETABLE)
        
SELECT PRISE_RANGE , COUNT(MAIN_PRODUCT) AS COUNT_ 
FROM X 
GROUP BY 1
ORDER BY COUNT_ DESC;



# COUNT OF EACH MAIN_PRODUCT 

SELECT *,
	   COUNT(MAIN_PRODUCT) OVER (PARTITION BY MAIN_PRODUCT) AS CNT_EACH_MAIN_PRODUCT,
       ROW_NUMBER() OVER (PARTITION BY MAIN_PRODUCT) AS ROW_NUMBER_
       FROM VEGETABLE
       ORDER BY CNT_EACH_MAIN_PRODUCT DESC;
       
       
       
# PRISE BEFORE DISCOUNT 

WITH X AS (
			SELECT * , 
			ROUND(PRISE_PER_KG*100/(100-DISCOUNT_PERCENT),0) AS PRISE_BEFORE_DISCOUNT
			FROM VEGETABLE
            )
SELECT * , (PRISE_BEFORE_DISCOUNT - PRISE_PER_KG) AS DISCOUNTED_AMOUNT
FROM X;




# WHICH MAIN_PRODUCT IS OFFERING MAXIMUM AND MINIMUM DISCOUNT PERCENTAGE 

SELECT * 
FROM VEGETABLE 
WHERE 
	 DISCOUNT_PERCENT IN ( 
	(SELECT MAX(DISCOUNT_PERCENT) AS DIS FROM VEGETABLE) UNION (SELECT MIN(DISCOUNT_PERCENT) AS DIS FROM VEGETABLE)
    );   
    # Tomato - Local (Loose) 74%  , Palak - Cleaned, without roots 6%
    
    
    
    
# AVERAGE PRISE OF PRISE PER KG 

SELECT ROUND(AVG(PRISE_PER_KG),0) AS MEAN FROM VEGETABLE;   # 121 RUPEES 




# AVERAGE DISCOUNT 

SELECT ROUND(AVG(DISCOUNT_PERCENT),0) AS MEAN_DISCOUNT_PERCENTAGE FROM VEGETABLE;   # 29% DISCOUNT 



# WHICH 5 MAIN_PRODUCT IS DEMANDING MOST 

SELECT MAIN_PRODUCT , COUNT(MAIN_PRODUCT) AS COUNTING 
FROM VEGETABLE 
GROUP BY  MAIN_PRODUCT
ORDER BY COUNTING DESC 
LIMIT 5;  # Banana, Beans, Apple, Tomato, Coconut



# MOST EXPENSIVE MAIN PRODUCT 

SELECT * FROM VEGETABLE 
WHERE PRISE_PER_KG IN
	(SELECT MAX(PRISE_PER_KG) AS MAXIMUM_PRISE_OF_PRODUCT
	FROM VEGETABLE);  # Asparagus
	
    

# TOP 5 MOST EXPENSIVE PRODUT

SELECT * FROM VEGETABLE 
ORDER BY PRISE_PER_KG DESC
LIMIT 5;
# Asparagus, Pomegranate - Peeled, Chilli - Thai Bird (Loose), Tulsi Leaves Persimmon /Amarphal

			






















	
























